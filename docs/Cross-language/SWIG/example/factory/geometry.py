# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _geometry
else:
    import _geometry

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Geometry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    POINT = _geometry.Geometry_POINT
    CIRCLE = _geometry.Geometry_CIRCLE
    __swig_destroy__ = _geometry.delete_Geometry

    def draw(self):
        return _geometry.Geometry_draw(self)

    @staticmethod
    def create(i):
        return _geometry.Geometry_create(i)

# Register Geometry in _geometry:
_geometry.Geometry_swigregister(Geometry)

def Geometry_create(i):
    return _geometry.Geometry_create(i)

class Point(Geometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def draw(self):
        return _geometry.Point_draw(self)

    def width(self):
        return _geometry.Point_width(self)

    def __init__(self):
        _geometry.Point_swiginit(self, _geometry.new_Point())
    __swig_destroy__ = _geometry.delete_Point

# Register Point in _geometry:
_geometry.Point_swigregister(Point)

class Circle(Geometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def draw(self):
        return _geometry.Circle_draw(self)

    def radius(self):
        return _geometry.Circle_radius(self)

    def __init__(self):
        _geometry.Circle_swiginit(self, _geometry.new_Circle())
    __swig_destroy__ = _geometry.delete_Circle

# Register Circle in _geometry:
_geometry.Circle_swigregister(Circle)



