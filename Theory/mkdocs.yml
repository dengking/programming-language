nav:
    - Introduction: index.md
    # 首先描述programming language的概念，然后抛出问题：面对如此之多的programming language，我们如何来进行掌握
    - Programming-language: Programming-language
    # 程序的lifetime
    - Lifetime: Lifetime
###################################################syntax相关内容，静态的，compiler处理的################################################
    # 基本上所有的programming language都会涉及到Syntax
    - Syntax: Syntax
    # 在阅读language reference的时候，常常会碰到Name这个词语，有必要对它进行总结。
    - Name: Name
    # 在programming language中普遍存在的一种情况
    - Aliase: Aliase
    # 使用专业的术语来描述“描述”
    - Declaration-and-definition: Declaration-and-definition
###################################################type system相关内容################################################
    # 下面描述每种programming language都会涉及到的内容
    - Type-system: Type-system
    # 很多programming language都支持reflection，reflection和type system密切相关，两者最好放在一起
    - Reflection: Reflection
###################################################重要概念################################################    
    - First-class-citizen: First-class-citizen.md
###################################################大多数programming language都会提供的construct################################################    
    # 基本的programming language construct
    - Basic-Language-construct: Basic-Language-construct
    # 基本上所有的programming language都使用了subroutine的概念
    - Subroutine: Subroutine
    # 越来越多的语言支持Coroutine
    - Coroutine: Coroutine
    # 当今大多数高级programming language都支持exception
    - Exception: Exception
###################################################################################################    
    # 编程范式
    - Programming-paradigm: Programming-paradigm
    # 设计模式
    - Design-pattern: Design-pattern
###################################################大多数programming language都会涉及到的一些编程问题################################################       
    # 每种语言中都会设计到resource management
    - Resource-management: Resource-management
    # 如何进行序列化？
    - Serialization: Serialization
    # Invariant是进行判别的一个非常重要的概念
    - Invariant: Invariant
    # 
    - Runtime: Runtime.md
    # 如何进行代码重构
    - Code-refactoring: Code-refactoring
    